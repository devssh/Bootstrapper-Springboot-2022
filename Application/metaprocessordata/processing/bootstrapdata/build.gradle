plugins {
	id 'java'
	id 'war'	
	id 'org.springframework.boot' version '3.0.2-SNAPSHOT'
	id 'io.spring.dependency-management' version '1.1.0'
	id 'org.asciidoctor.convert' version '1.5.8'
}

war.enabled = false
jar.enabled = false
bootJar.enabled = true
bootWar.enabled = true

group = '??{projectname}'
version = '1.0.0-SNAPSHOT'
sourceCompatibility = '17'
configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}
repositories {
	mavenCentral()
	maven { url 'https://repo.spring.io/milestone' }
	maven { url 'https://repo.spring.io/snapshot' }
}
ext {
	set('snippetsDir', file("build/generated-snippets"))
}
dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-rest'
	implementation 'org.springframework.boot:spring-boot-starter-groovy-templates'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-web-services'
	implementation 'javax.ws.rs:javax.ws.rs-api:2.0'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	runtimeOnly 'org.postgresql:postgresql'
	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
	testImplementation 'org.springframework.security:spring-security-test'
	testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
    	testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'
	testCompileOnly 'org.projectlombok:lombok'  
	testAnnotationProcessor 'org.projectlombok:lombok'
	providedRuntime 'org.springframework.boot:spring-boot-starter-tomcat'

}

test {
	useJUnitPlatform()
	outputs.dir snippetsDir
	afterTest { desc, result -> 
        	logger.quiet "Executing test ${desc.name} [${desc.className}] with result: ${result.resultType}"
    	}	
}

tasks.named('asciidoctor') {
	inputs.dir snippetsDir
	dependsOn test
}

